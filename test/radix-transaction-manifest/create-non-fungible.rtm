# This transaction manifest creates a new non-fungible resource with initial supply and with the 
# default auth.

# ==================================================================================================
# WARNING: If you will be submitting this transaction through the Babylon wallet then you MUST
# remove the "lock_fee" instruction that you see below. Otherwise your transaction will fail. If all 
# that you are using is resim then you can safely ignore this warning.
# ==================================================================================================

# Locking 10 XRD in fees from the account component. 
CALL_METHOD 
    Address("account_tdx_2_1294v3qk9kg2v9q2xtgsv3yeqzudev9kkew93jqha8phcg6wsz0tzd4") 
    "lock_fee"
    Decimal("500");

# Creating a new resource 
CREATE_NON_FUNGIBLE_RESOURCE_WITH_INITIAL_SUPPLY
    # Owner role - This gets metadata permissions, and is the default for other permissions
    # Can set as Enum<OwnerRole::Fixed>(access_rule)  or Enum<OwnerRole::Updatable>(access_rule)
    Enum<OwnerRole::None>()
    Enum<NonFungibleIdType::Integer>()                                                                  # The type of NonFungible Id
    true                                                                                                # Whether the engine should track supply (avoid for massively parallelizable tokens)
    Enum<0u8>(Enum<0u8>(Tuple(Array<Enum>(), Array<Tuple>(), Array<Enum>())), Enum<0u8>(66u8), Array<String>())     # Non Fungible Data Schema
    Map<NonFungibleLocalId, Tuple>(                                                                     # Initial supply to mint
        NonFungibleLocalId("#12#") => Tuple(Tuple()),
        NonFungibleLocalId("#13#") => Tuple(Tuple()),
        NonFungibleLocalId("#14#") => Tuple(Tuple()),
        NonFungibleLocalId("#15#") => Tuple(Tuple()),
        NonFungibleLocalId("#16#") => Tuple(Tuple()),
        NonFungibleLocalId("#17#") => Tuple(Tuple()),
    )
    Tuple(
        None,        # Mint Roles (if None: defaults to DenyAll, DenyAll)
                     # Minter (if None: defaults to Owner)
                     # Minter Updater (if None: defaults to Owner)
                     
        None,        # Burn Roles (if None: defaults to DenyAll, DenyAll)
        None,        # Freeze Roles (if None: defaults to DenyAll, DenyAll)
        None,        # Recall Roles (if None: defaults to DenyAll, DenyAll)
        None,        # Withdraw Roles (if None: defaults to AllowAll, DenyAll)
        None,        # Deposit Roles (if None: defaults to AllowAll, DenyAll)
        None         # Non Fungible Data Update Roles (if None: defaults to DenyAll, DenyAll)
    )
    Tuple(                                                                   # Metadata initialization
        Map<String, Tuple>(                                                  # Initial metadata values
            "name" => Tuple(
                Some(Enum<Metadata::String>("Test NFT")),                  # Resource Name
                true                                                         # Locked
            ),
            "symbol" => Tuple(
                Some(Enum<Metadata::String>("TNFT")),                  # Resource Name
                true                         
            ),
            "description" => Tuple(
                Some(Enum<Metadata::String>("For test")),                  # Resource Name
                true 
            )
        ),
        Map<String, Enum>(                                                   # Metadata roles
            "metadata_setter" => None,         # Metadata setter role
            "metadata_setter_updater" => None,                               # Metadata setter updater role as None defaults to OWNER
            "metadata_locker" => None,          # Metadata locker role
            "metadata_locker_updater" => None                                # Metadata locker updater role as None defaults to OWNER
        )
    )
    None;             # No Address Reservation

# Depositing the entirety of the initial supply of the newly created resource into our account 
# component.
CALL_METHOD
    Address("account_tdx_2_1294v3qk9kg2v9q2xtgsv3yeqzudev9kkew93jqha8phcg6wsz0tzd4") 
    "deposit_batch"
    Expression("ENTIRE_WORKTOP");